<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.woniuxy.dao.DepositMapper">
  <resultMap id="BaseResultMap" type="com.woniuxy.domain.Deposit">
    <id column="did" jdbcType="INTEGER" property="did" />
    <result column="gid" jdbcType="INTEGER" property="gid" />
    <result column="uid" jdbcType="INTEGER" property="uid" />
    <result column="dmoney" jdbcType="DOUBLE" property="dmoney" />
    <result column="gstate" jdbcType="INTEGER" property="gstate" />
  </resultMap>
  <sql id="Example_Where_Clause">
    <where>
      <foreach collection="oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Update_By_Example_Where_Clause">
    <where>
      <foreach collection="example.oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Base_Column_List">
    did, gid, uid, dmoney, gstate
  </sql>
  <select id="selectByExample" parameterType="com.woniuxy.domain.DepositExample" resultMap="BaseResultMap">
    select
    <if test="distinct">
      distinct
    </if>
    <include refid="Base_Column_List" />
    from deposit
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null">
      order by ${orderByClause}
    </if>
  </select>
  <select id="selectByPrimaryKey" parameterType="java.lang.Integer" resultMap="BaseResultMap">
    select 
    <include refid="Base_Column_List" />
    from deposit
    where did = #{did,jdbcType=INTEGER}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer">
    delete from deposit
    where did = #{did,jdbcType=INTEGER}
  </delete>
  <delete id="deleteByExample" parameterType="com.woniuxy.domain.DepositExample">
    delete from deposit
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </delete>
  <insert id="insert" parameterType="com.woniuxy.domain.Deposit">
    insert into deposit (did, gid, uid, 
      dmoney, gstate)
    values (#{did,jdbcType=INTEGER}, #{gid,jdbcType=INTEGER}, #{uid,jdbcType=INTEGER}, 
      #{dmoney,jdbcType=DOUBLE}, #{gstate,jdbcType=INTEGER})
  </insert>
  <insert id="insertSelective" parameterType="com.woniuxy.domain.Deposit">
    insert into deposit
    <trim prefix="(" suffix=")" suffixOverrides=",">
      <if test="did != null">
        did,
      </if>
      <if test="gid != null">
        gid,
      </if>
      <if test="uid != null">
        uid,
      </if>
      <if test="dmoney != null">
        dmoney,
      </if>
      <if test="gstate != null">
        gstate,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides=",">
      <if test="did != null">
        #{did,jdbcType=INTEGER},
      </if>
      <if test="gid != null">
        #{gid,jdbcType=INTEGER},
      </if>
      <if test="uid != null">
        #{uid,jdbcType=INTEGER},
      </if>
      <if test="dmoney != null">
        #{dmoney,jdbcType=DOUBLE},
      </if>
      <if test="gstate != null">
        #{gstate,jdbcType=INTEGER},
      </if>
    </trim>
  </insert>
  <select id="countByExample" parameterType="com.woniuxy.domain.DepositExample" resultType="java.lang.Long">
    select count(*) from deposit
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </select>
  <update id="updateByExampleSelective" parameterType="map">
    update deposit
    <set>
      <if test="record.did != null">
        did = #{record.did,jdbcType=INTEGER},
      </if>
      <if test="record.gid != null">
        gid = #{record.gid,jdbcType=INTEGER},
      </if>
      <if test="record.uid != null">
        uid = #{record.uid,jdbcType=INTEGER},
      </if>
      <if test="record.dmoney != null">
        dmoney = #{record.dmoney,jdbcType=DOUBLE},
      </if>
      <if test="record.gstate != null">
        gstate = #{record.gstate,jdbcType=INTEGER},
      </if>
    </set>
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByExample" parameterType="map">
    update deposit
    set did = #{record.did,jdbcType=INTEGER},
      gid = #{record.gid,jdbcType=INTEGER},
      uid = #{record.uid,jdbcType=INTEGER},
      dmoney = #{record.dmoney,jdbcType=DOUBLE},
      gstate = #{record.gstate,jdbcType=INTEGER}
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByPrimaryKeySelective" parameterType="com.woniuxy.domain.Deposit">
    update deposit
    <set>
      <if test="gid != null">
        gid = #{gid,jdbcType=INTEGER},
      </if>
      <if test="uid != null">
        uid = #{uid,jdbcType=INTEGER},
      </if>
      <if test="dmoney != null">
        dmoney = #{dmoney,jdbcType=DOUBLE},
      </if>
      <if test="gstate != null">
        gstate = #{gstate,jdbcType=INTEGER},
      </if>
    </set>
    where did = #{did,jdbcType=INTEGER}
  </update>
  <update id="updateByPrimaryKey" parameterType="com.woniuxy.domain.Deposit">
    update deposit
    set gid = #{gid,jdbcType=INTEGER},
      uid = #{uid,jdbcType=INTEGER},
      dmoney = #{dmoney,jdbcType=DOUBLE},
      gstate = #{gstate,jdbcType=INTEGER}
    where did = #{did,jdbcType=INTEGER}
  </update>
  
  <select id="findAll" parameterType="Page" resultMap="sd">
  	SELECT  d.`did`,d.`dmoney`,d.`gstate`,u.`uid`,u.`uname`,g.`gid`,g.`gname`,g.`gstate` `gg` FROM 
  	deposit d 
  	 JOIN 
  	goods g 
  	ON 
  	d.gid=g.gid 
  	 JOIN user u 
  	ON d.uid=u.uid limit #{startLine},#{size}
  </select>
  
  <resultMap type="Deposit" id="sd"> 
  	<id property="did" column="did"/>
  	<result property="dmoney" column="dmoney"/>
  	<result property="gstate" column="gstate"/>
  	<association property="user" javaType="user">
  		<id property="uid" column="uid"/>
  		<result property="uname" column="uname"/>
  	</association>
  	<association property="goods" javaType="goods">
  		<id property="gid" column="gid"/>
  		<result property="gname" column="gname"/>
  		<result  property="gstate" column="gg"  />
  	</association>
  </resultMap>
  
  
  
     
   <select id="findOne" parameterType="java.lang.Integer"  resultMap="depo">
  	SELECT  d.`did`,d.`dmoney`,d.`gstate`,u.`uid`,u.`uname`,g.`gid`,g.`gname`,g.`gstate` `gg` FROM
  	deposit d 
  	 JOIN 
  	goods g 
  	ON 
  	d.gid=g.gid 
  	 JOIN user u 
  	ON d.uid=u.uid
  	where d.did = #{did}
  </select>
  
  
  
  <select id="findCount"  resultType="java.lang.Integer">
  	SELECT  count(*) FROM 
  	deposit d 
  	 JOIN 
  	goods g 
  	ON 
  	d.gid=g.gid 
  	 JOIN user u 
  	ON d.uid=u.uid
  	where g.`gstate` in (3,5,6,7)
  	and d.uid = #{uid}
  </select>
  
  
  <select id="findDepo" parameterType="Page" resultMap="depo">
  	SELECT  d.`did`,d.`dmoney`,d.`gstate`,u.`uid`,u.`uname`,g.`gid`,g.`gname`,g.`gstate` `gg` FROM 
  	deposit d 
  	 JOIN 
  	goods g 
  	ON 
  	d.gid=g.gid 
  	 JOIN user u 
  	ON d.uid=u.uid
  	where g.`gstate` in (3,5,6,7)
  	and d.uid = #{uid}
  	limit #{page.startLine},#{page.size}
  </select>
  
  
  <select id="search" parameterType="java.util.HashMap" resultType="Deposit">
  	SELECT  * FROM 
  	deposit 
  	<where>
  	 	<if test="gid !=null">
  	 		gid=#{gid} and uid=#{uid}
  	 	</if>
  	</where>
  </select>
  
  
  
  
  
  
  
  
  
  
  <resultMap type="Deposit" id="depo"> 
  	<id property="did" column="did"/>
  	<result property="dmoney" column="dmoney"/>
  	<result property="gstate" column="gstate"/>
  	<association property="user" javaType="user">
  		<id property="uid" column="uid"/>
  		<result property="uname" column="uname"/>
  	</association>
  	<association property="goods" javaType="goods">
  		<id property="gid" column="gid"/>
  		<result property="gname" column="gname"/>
  		<result  property="gstate" column="gg"  />
  	</association>
  </resultMap>
  
</mapper>